syntax = "proto3";

package mothership.v1;

import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "proto/v1/entry.proto";

option java_multiple_files = true;
option java_outer_classname = "ProcessRpmProto";
option java_package = "org.openela.mothership.v1";
option go_package = "github.com/openela/mothership/proto/v1;mothershippb";

// ProcessRPMRequest is the request message for the ProcessRPM workflow
message ProcessRPMRequest {
  // URI of the RPM to process
  // e.g. gs://bucket/path/to/rpm.rpm
  // The server must have read access to the RPM and WILL error if it does not
  string rpm_uri = 1 [(google.api.field_behavior) = REQUIRED];

  // OS Release of the RPM
  // e.g. Red Hat Enterprise Linux release 8.8 (Ootpa)
  string os_release = 2 [(google.api.field_behavior) = REQUIRED];

  // Self reported checksum of the RPM
  // Must be a SHA256 checksum and match the RPM
  string checksum = 3 [(google.api.field_behavior) = REQUIRED];

  // Self reported repository of the RPM
  // e.g. BaseOS
  string repository = 4 [(google.api.field_behavior) = REQUIRED];

  // Batch to associate the RPM with
  string batch = 5;
}

// ProcessRPMInternalRequest is the request message that the Server
// uses in its call to the ProcessRPM workflow
message ProcessRPMInternalRequest {
  // Worker ID of the worker processing the RPM
  string worker_id = 1 [(google.api.field_behavior) = REQUIRED];
}

// ProcessRPMArgs is the arguments for the ProcessRPM workflow
message ProcessRPMArgs {
  // Public request
  ProcessRPMRequest request = 1 [(google.api.field_behavior) = REQUIRED];

  // Internal request
  ProcessRPMInternalRequest internal_request = 2 [(google.api.field_behavior) = REQUIRED];
}

// ProcessRPMMetadata is the metadata for the ProcessRPM workflow
message ProcessRPMMetadata {
  // The time at which the workflow started
  google.protobuf.Timestamp start_time = 1;

  // The time at which the workflow finished
  google.protobuf.Timestamp end_time = 2;
}

// ProcessRPMResponse is the response message for the ProcessRPM workflow
message ProcessRPMResponse {
  // The entry created for the RPM
  Entry entry = 1;
}

// ImportRPMResponse is the response message for the ImportRPM activity
message ImportRPMResponse {
  // Commit hash of the imported RPM
  // e.g. 1234567890abcdef1234567890abcdef12345678
  string commit_hash = 1 [(google.api.field_behavior) = REQUIRED];

  // Commit URI of the imported RPM
  string commit_uri = 2 [(google.api.field_behavior) = REQUIRED];

  // Commit branch of the imported RPM
  string commit_branch = 3 [(google.api.field_behavior) = REQUIRED];

  // Commit tag of the imported RPM
  string commit_tag = 4 [(google.api.field_behavior) = REQUIRED];

  // NEVRA of the imported RPM
  // e.g. rpm-1.0.0-1.el8.x86_64
  string nevra = 5 [(google.api.field_behavior) = REQUIRED];

  // Package name of the imported RPM
  // e.g. rpm
  string pkg = 6 [(google.api.field_behavior) = REQUIRED];
}
